{{ $databaseConnectionString := printf "%s:%s@%s" .Values.configuration.database.user .Values.configuration.database.password .Values.configuration.database.host }}
{{ $maxOpenConns := default 100 .Values.configuration.database.max_open_conns }}
{{ $maxIdleConns := default 2 .Values.configuration.database.max_idle_conns }}
{{ $conMaxLifeTime := default -1 .Values.configuration.database.conn_max_lifetime }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-conf
  namespace: {{ .Release.Namespace }}
data:
{{ if .Values.configuration.matrix_key }}
  matrix_key.pem: {{ toJson .Values.configuration.matrix_key }}
{{ end }}
  dendrite.yaml: |
    # This is the Dendrite configuration file.
    #
    # The configuration is split up into sections - each Dendrite component has a
    # configuration section, in addition to the "global" section which applies to
    # all components.
    #
    # At a minimum, to get started, you will need to update the settings in the
    # "global" section for your deployment, and you will need to check that the
    # database "connection_string" line in each component section is correct.
    #
    # Each component with a "database" section can accept the following formats
    # for "connection_string":
    #   SQLite:     file:filename.db
    #               file:///path/to/filename.db
    #   PostgreSQL: postgresql://user:pass@hostname/database?params=...
    #
    # SQLite is embedded into Dendrite and therefore no further prerequisites are
    # needed for the database when using SQLite mode. However, performance with
    # PostgreSQL is significantly better and recommended for multi-user deployments.
    # SQLite is typically around 20-30% slower than PostgreSQL when tested with a
    # small number of users and likely will perform worse still with a higher volume
    # of users.
    #
    # The "max_open_conns" and "max_idle_conns" settings configure the maximum
    # number of open/idle database connections. The value 0 will use the database
    # engine default, and a negative value will use unlimited connections. The
    # "conn_max_lifetime" option controls the maximum length of time a database
    # connection can be idle in seconds - a negative value is unlimited.

    # The version of the configuration file.
    version: 1

    # Global Matrix configuration. This configuration applies to all components.
    global:
      # The domain name of this homeserver.
      server_name: {{ required "A server_name must be supplied." .Values.configuration.servername | quote }}

      # The path to the signing private key file, used to sign requests and events.
      private_key: matrix_key.pem

      # A unique identifier for this private key. Must start with the prefix "ed25519:".
      key_id: ed25519:auto

      # How long a remote server can cache our server signing key before requesting it
      # again. Increasing this number will reduce the number of requests made by other
      # servers for our key but increases the period that a compromised key will be
      # considered valid by other homeservers.
      key_validity_period: {{ .Values.configuration.key_validity_period | quote }}

      # Lists of domains that the server will trust as identity servers to verify third
      # party identifiers such as phone numbers and email addresses.
      trusted_third_party_id_servers:
      {{- toYaml .Values.configuration.trusted_third_party_id_servers | nindent 8 }}

      # Configuration for Kafka/Naffka.
      kafka:
        # List of Kafka broker addresses to connect to. This is not needed if using
        # Naffka in monolith mode.
        addresses:
        {{- toYaml .Values.configuration.kafka.addresses | nindent 10 }}

        # The prefix to use for Kafka topic names for this homeserver. Change this only if
        # you are running more than one Dendrite homeserver on the same Kafka deployment.
        topic_prefix: {{ default "Dendrite" .Values.configuration.kafka.topic_prefix }}

        # Whether to use Naffka instead of Kafka. This is only available in monolith
        # mode, but means that you can run a single-process server without requiring
        # Kafka.
        use_naffka: {{ .Values.configuration.kafka.use_naffka }}

        use_nats: {{ .Values.configuration.kafka.use_nats }}

        # The max size a Kafka message is allowed to use.
        # You only need to change this value, if you encounter issues with too large messages.
        # Must be less than/equal to "max.message.bytes" configured in Kafka.
        # Defaults to 8388608 bytes.
        max_message_bytes: {{ default 8388608 .Values.configuration.kafka.max_message_bytes }}

        # Naffka database options. Not required when using Kafka.
        naffka_database:
          connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_naffka?sslmode=disable
          max_open_conns: {{ $maxOpenConns }}
          max_idle_conns: {{ $maxIdleConns }}
          conn_max_lifetime: {{ $conMaxLifeTime }}

      # Configuration for Prometheus metric collection.
      metrics:
        {{- toYaml .Values.configuration.metrics | nindent 8 }}

      # DNS cache options. The DNS cache may reduce the load on DNS servers
      # if there is no local caching resolver available for use.
      dns_cache:
        {{- toYaml .Values.configuration.dns_cache | nindent 8 }}

    # Configuration for the Appservice API.
    app_service_api:
      internal_api:
        listen: http://[::]:{{ .Values.components.appservice.listen_int }}
        connect: http://{{ .Values.components.appservice.connect }}
      database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_appservice?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}

      # Appservice configuration files to load into this homeserver.
      config_files:
        {{- range $x, $y := .Files.Glob "appservices/*" }}
          - /etc/dendrite/appservices/{{ base $x }}
        {{ end }}

    # Configuration for the Client API.
    client_api:
    {{- with .Values.components.clientapi }}
      internal_api:
        listen: http://[::]:{{ .listen_int }}
        connect: http://{{ .connect }}
      external_api:
        listen: http://[::]:{{ .listen_ext }}

      # Prevents new users from being able to register on this homeserver, except when
      # using the registration shared secret below.
      registration_disabled: {{ .disabled }}

      # If set, allows registration by anyone who knows the shared secret, regardless of
      # whether registration is otherwise disabled.
      registration_shared_secret: {{ .registration.shared_secret | quote }}

      # Whether to require reCAPTCHA for registration.
      enable_registration_captcha:  {{ .enable_registration_captcha }}

      # Settings for ReCAPTCHA.
      recaptcha_public_key: {{ .registration.recaptcha_public_key | quote }}
      recaptcha_private_key: {{ .registration.recaptcha_private_key | quote}}
      recaptcha_bypass_secret: {{ .registration.recaptcha_bypass_secret | quote}}
      recaptcha_siteverify_api: {{ .registration.recaptcha_siteverify_api | quote}}
      {{ end }}
      # TURN server information that this homeserver should send to clients.
      turn:
        {{- toYaml .Values.configuration.turn | nindent 8 }}

      # Settings for rate-limited endpoints. Rate limiting will kick in after the
      # threshold number of "slots" have been taken by requests from a specific
      # host. Each "slot" will be released after the cooloff time in milliseconds.
      rate_limiting:
        {{- toYaml .Values.configuration.rate_limiting | nindent 8 }}

    # Configuration for the EDU server.
    edu_server:
      internal_api:
        listen: http://[::]:{{ .Values.components.eduserver.listen_int }}
        connect: http://{{ .Values.components.eduserver.connect }}

    # Configuration for the Federation API.
    federation_api:
      internal_api:
        listen: http://[::]:{{ .Values.components.federationapi.listen_int }}
        connect: http://{{ .Values.components.federationapi.connect }}
      external_api:
        listen: http://[::]:{{ .Values.components.federationapi.listen_ext }}

      # List of paths to X.509 certificates to be used by the external federation listeners.
      # These certificates will be used to calculate the TLS fingerprints and other servers
      # will expect the certificate to match these fingerprints. Certificates must be in PEM
      # format.
      #federation_certificates: []

    # Configuration for the Federation Sender.
    federation_sender:
      internal_api:
        listen: http://[::]:{{ .Values.components.federationsender.listen_int }}
        connect: http://{{ .Values.components.federationsender.connect }}
      database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_federationsender?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}

      # How many times we will try to resend a failed transaction to a specific server. The
      # backoff is 2**x seconds, so 1 = 2 seconds, 2 = 4 seconds, 3 = 8 seconds etc.
      send_max_retries: 16

      # Disable the validation of TLS certificates of remote federated homeservers. Do not
      # enable this option in production as it presents a security risk!
      disable_tls_validation: false

      # Use the following proxy server for outbound federation traffic.
      proxy_outbound:
        {{- toYaml .Values.configuration.outbound_proxy | nindent 8 }}

    # Configuration for the Key Server (for end-to-end encryption).
    key_server:
      internal_api:
        listen: http://[::]:{{ .Values.components.keyserver.listen_int }}
        connect: http://{{ .Values.components.keyserver.connect }}
      database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_keyserver?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}

    # Configuration for the Media API.
    media_api:
      internal_api:
        listen: http://[::]:{{ .Values.components.mediaapi.listen_int }}
        connect: http://{{ .Values.components.mediaapi.connect }}
      external_api:
        listen: http://[::]:{{ .Values.components.mediaapi.listen_ext }}
      database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_mediaapi?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}

      # Storage path for uploaded media. May be relative or absolute.
      base_path: /data/media_store

      # The maximum allowed file size (in bytes) for media uploads to this homeserver
      # (0 = unlimited).
      max_file_size_bytes: {{ default 10485760 .Values.components.mediaapi.max_file_size_bytes }}

      # Whether to dynamically generate thumbnails if needed.
      dynamic_thumbnails: {{ .Values.components.mediaapi.dynamic_thumbnails }}

      # The maximum number of simultaneous thumbnail generators to run.
      max_thumbnail_generators: {{ .Values.components.mediaapi.max_thumbnail_generators }}

      # A list of thumbnail sizes to be generated for media content.
      thumbnail_sizes:
        {{- toYaml .Values.components.mediaapi.thumbnail_sizes | nindent 8 }}

    # Configuration for the Room Server.
    room_server:
      internal_api:
        listen: http://[::]:{{ .Values.components.roomserver.listen_int }}
        connect: http://{{ .Values.components.roomserver.connect }}
      database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_roomserver?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}

    # Configuration for the Server Key API (for server signing keys).
    signing_key_server:
      internal_api:
        listen: http://[::]:{{ .Values.components.signingkeyserver.listen_int }}
        connect: http://{{ .Values.components.signingkeyserver.connect }}
      database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_signingkeyserver?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}

      # Perspective keyservers to use as a backup when direct key fetches fail. This may
      # be required to satisfy key requests for servers that are no longer online when
      # joining some rooms.
      key_perspectives:
      - server_name: matrix.org
        keys:
        - key_id: ed25519:auto
          public_key: Noi6WqcDj0QmPxCNQqgezwTlBKrfqehY1u2FyWP9uYw
        - key_id: ed25519:a_RXGa
          public_key: l8Hft5qXKn1vfHrg3p4+W8gELQVo8N13JkluMfmn2sQ

    # Configuration for the Sync API.
    sync_api:
      internal_api:
        listen: http://[::]:{{ .Values.components.syncapi.listen_int }}
        connect: http://{{ .Values.components.syncapi.connect }}
      external_api:
        listen: http://[::]:{{ .Values.components.syncapi.listen_ext }}
      database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_syncapi?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}

    # Configuration for the User API.
    user_api:
      internal_api:
        listen: http://[::]:{{ .Values.components.userapi.listen_int }}
        connect: http://{{ .Values.components.userapi.connect }}
      account_database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_userapi_accounts?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}
      device_database:
        connection_string: postgresql://{{- $databaseConnectionString -}}/dendrite_userapi_devices?sslmode=disable
        max_open_conns: {{ $maxOpenConns }}
        max_idle_conns: {{ $maxIdleConns }}
        conn_max_lifetime: {{ $conMaxLifeTime }}

    # Configuration for Opentracing.
    # See https://github.com/matrix-org/dendrite/tree/master/docs/tracing for information on
    # how this works and how to set it up.
    tracing:
      {{- toYaml .Values.configuration.tracing | nindent 6 }}

    # Logging configuration, in addition to the standard logging that is sent to
    # stdout by Dendrite.
    logging:
    {{- toYaml .Values.configuration.logging | nindent 4 }}